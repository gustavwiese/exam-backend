package kea.exambackend.service;

import kea.exambackend.dto.DisciplineDTO;
import kea.exambackend.dto.ParticipantDTO;
import kea.exambackend.entity.Discipline;
import kea.exambackend.entity.Participant;
import kea.exambackend.repository.DisciplineRepository;
import kea.exambackend.repository.ParticipantRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class DisciplineService {

    @Autowired
    private DisciplineRepository disciplineRepository;

    @Autowired
    private ParticipantRepository participantRepository;

    public DisciplineDTO createDiscipline(DisciplineDTO disciplineDTO) {
        Discipline discipline = convertToEntity(disciplineDTO);
        return convertToDTO(disciplineRepository.save(discipline));
    }

    public DisciplineDTO updateDiscipline(Long id, DisciplineDTO disciplineDTO) {
        Discipline discipline = disciplineRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Discipline not found with id: " + id));

        // Update discipline properties
        updateDisciplineFromDTO(discipline, disciplineDTO);

        // Ensure bidirectional relationship is updated
        updateDisciplineParticipants(discipline, disciplineDTO);

        return convertToDTO(disciplineRepository.save(discipline));
    }

    public void addParticipantToDiscipline(Long disciplineId, Long participantId) {
        Discipline discipline = getDisciplineById(disciplineId);
        Participant participant = participantRepository.findById(participantId)
                .orElseThrow(() -> new RuntimeException("Participant not found with id: " + participantId));

        discipline.getParticipants().add(participant);
        participant.getDisciplines().add(discipline);
        disciplineRepository.save(discipline);
    }

    public void removeParticipantFromDiscipline(Long disciplineId, Long participantId) {
        Discipline discipline = getDisciplineById(disciplineId);
        Participant participant = participantRepository.findById(participantId)
                .orElseThrow(() -> new RuntimeException("Participant not found with id: " + participantId));

        discipline.getParticipants().remove(participant);
        disciplineRepository.save(discipline);
    }

    public List<ParticipantDTO> getParticipantsOfDiscipline(Long disciplineId) {
        Discipline discipline = getDisciplineById(disciplineId);
        return discipline.getParticipants().stream()
                .map(this::convertParticipantToDTO)
                .collect(Collectors.toList());
    }

    public List<DisciplineDTO> getAllDisciplines() {
        return disciplineRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public Discipline getDisciplineById(Long id) {
        return disciplineRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Discipline not found with id: " + id));
    }

    public void deleteDiscipline(Long id) {
        Discipline discipline = getDisciplineById(id);
        disciplineRepository.delete(discipline);
    }

    public List<DisciplineDTO> searchDisciplinesByName(String name) {
        return disciplineRepository.findByNameContaining(name).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    private DisciplineDTO convertToDTO(Discipline discipline) {
        DisciplineDTO disciplineDTO = new DisciplineDTO();
        disciplineDTO.setId(discipline.getId());
        disciplineDTO.setName(discipline.getName());
        disciplineDTO.setResultType(discipline.getResultType());
        disciplineDTO.setParticipants(convertParticipantsToDTOs(discipline.getParticipants()));
        return disciplineDTO;
    }

    private Discipline convertToEntity(DisciplineDTO disciplineDTO) {
        Discipline discipline = new Discipline();
        // Note: id should not be set here since it's generated by the database
        updateEntityFromDTO(discipline, disciplineDTO);
        return discipline;
    }

    private void updateEntityFromDTO(Discipline discipline, DisciplineDTO disciplineDTO) {
        discipline.setName(disciplineDTO.getName());
        discipline.setResultType(disciplineDTO.getResultType());
    }

    private List<ParticipantDTO> convertParticipantsToDTOs(Set<Participant> participants) {
        return participants.stream()
                .map(this::convertParticipantToDTO)
                .collect(Collectors.toList());
    }

    private ParticipantDTO convertParticipantToDTO(Participant participant) {
        ParticipantDTO participantDTO = new ParticipantDTO();
        participantDTO.setId(participant.getId());
        participantDTO.setName(participant.getName());
        participantDTO.setGender(participant.getGender());
        participantDTO.setAge(participant.getAge());
        participantDTO.setClub(participant.getClub());
        // You may set disciplines here if needed
        return participantDTO;
    }

    private void updateDisciplineFromDTO(Discipline discipline, DisciplineDTO disciplineDTO) {
        discipline.setName(disciplineDTO.getName());
        discipline.setResultType(disciplineDTO.getResultType());
    }

    private void updateDisciplineParticipants(Discipline discipline, DisciplineDTO disciplineDTO) {
        // Clear existing participants to ensure correct update
        discipline.getParticipants().clear();

        if (disciplineDTO.getParticipants() != null) {
            for (ParticipantDTO participantDTO : disciplineDTO.getParticipants()) {
                Participant participant = participantRepository.findById(participantDTO.getId())
                        .orElseThrow(() -> new RuntimeException("Participant not found with id: " + participantDTO.getId()));
                discipline.getParticipants().add(participant);
                participant.getDisciplines().add(discipline);
            }
        }
    }
}
