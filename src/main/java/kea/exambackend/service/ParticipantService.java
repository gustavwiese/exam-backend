package kea.exambackend.service;

import kea.exambackend.dto.DisciplineDTO;
import kea.exambackend.dto.ParticipantDTO;
import kea.exambackend.entity.Discipline;
import kea.exambackend.entity.Participant;
import kea.exambackend.repository.DisciplineRepository;
import kea.exambackend.repository.ParticipantRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class ParticipantService {

    @Autowired
    private ParticipantRepository participantRepository;

    @Autowired
    private DisciplineRepository disciplineRepository;

    public ParticipantDTO createParticipant(ParticipantDTO participantDTO) {
        Participant participant = convertToEntity(participantDTO);
        return convertToDTO(participantRepository.save(participant));
    }

    public List<ParticipantDTO> getAllParticipants() {
        return participantRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public ParticipantDTO getParticipantById(Long id) {
        Participant participant = participantRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Participant not found with id: " + id));
        return convertToDTO(participant);
    }

    public ParticipantDTO updateParticipant(Long id, ParticipantDTO participantDTO) {
        Participant participant = participantRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Participant not found with id: " + id));

        // Update participant properties
        updateParticipantFromDTO(participant, participantDTO);

        // Ensure bidirectional relationship is updated
        updateParticipantDisciplines(participant, participantDTO);

        return convertToDTO(participantRepository.save(participant));
    }

    public void deleteParticipant(Long id) {
        Participant participant = participantRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Participant not found with id: " + id));

        // Remove participant from all associated disciplines
        participant.getDisciplines().forEach(discipline -> discipline.getParticipants().remove(participant));

        participantRepository.delete(participant);
    }

    public List<ParticipantDTO> searchParticipantsByName(String name) {
        return participantRepository.findByNameContaining(name).stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    private ParticipantDTO convertToDTO(Participant participant) {
        ParticipantDTO participantDTO = new ParticipantDTO();
        participantDTO.setId(participant.getId());
        participantDTO.setName(participant.getName());
        participantDTO.setGender(participant.getGender());
        participantDTO.setAge(participant.getAge());
        participantDTO.setClub(participant.getClub());
        participantDTO.setDisciplines(convertDisciplinesToDTOs(participant.getDisciplines()));
        return participantDTO;
    }

    private Participant convertToEntity(ParticipantDTO participantDTO) {
        Participant participant = new Participant();
        // Note: id should not be set here since it's generated by the database
        updateEntityFromDTO(participant, participantDTO);
        return participant;
    }

    private void updateEntityFromDTO(Participant participant, ParticipantDTO participantDTO) {
        participant.setName(participantDTO.getName());
        participant.setGender(participantDTO.getGender());
        participant.setAge(participantDTO.getAge());
        participant.setClub(participantDTO.getClub());
    }

    private List<DisciplineDTO> convertDisciplinesToDTOs(Set<Discipline> disciplines) {
        return disciplines.stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    private DisciplineDTO convertToDTO(Discipline discipline) {
        DisciplineDTO disciplineDTO = new DisciplineDTO();
        disciplineDTO.setId(discipline.getId());
        disciplineDTO.setName(discipline.getName());
        disciplineDTO.setResultType(discipline.getResultType());
        // You may set participants here if needed
        return disciplineDTO;
    }

    private void updateParticipantFromDTO(Participant participant, ParticipantDTO participantDTO) {
        participant.setName(participantDTO.getName());
        participant.setGender(participantDTO.getGender());
        participant.setAge(participantDTO.getAge());
        participant.setClub(participantDTO.getClub());
    }

    private void updateParticipantDisciplines(Participant participant, ParticipantDTO participantDTO) {
        // Clear existing disciplines to ensure correct update
        participant.getDisciplines().clear();

        if (participantDTO.getDisciplines() != null) {
            for (DisciplineDTO disciplineDTO : participantDTO.getDisciplines()) {
                Discipline discipline = disciplineRepository.findById(disciplineDTO.getId())
                        .orElseThrow(() -> new RuntimeException("Discipline not found with id: " + disciplineDTO.getId()));
                participant.getDisciplines().add(discipline);
                discipline.getParticipants().add(participant);
            }
        }
    }
}
